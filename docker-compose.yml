services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data # 持久化数据库数据
    healthcheck:
      test: pg_isready
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - default
    restart: always

  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: rabbitmq
    env_file:
      - .env
    ports:
      - 15672:15672 # rabbitmq 管理面板端口
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # 持久化 rabbitmq 数据
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - default
    restart: always

  redis:
    image: redis:7-alpine
    container_name: redis
    env_file:
      - .env # 设置 redis 密码
    command:
      - redis-server # 启动 redis
      - --appendonly yes # 持久化 redis 数据
    volumes:
      - redis_data:/data # 持久化 redis 数据
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - default
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - default
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.middlewares.backend-stripprefix.stripprefix.prefixes=/api
      - traefik.http.routers.backend.middlewares=backend-stripprefix
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=le
      - traefik.http.services.backend.loadbalancer.server.port=3000

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    networks:
      - default
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls.certresolver=le
      - traefik.http.services.frontend.loadbalancer.server.port=80

  traefik:
    image: traefik:v3
    container_name: traefik
    command:
      - --api.insecure=true # 开启 Traefik 仪表盘
      - --providers.docker=true # 让 Traefik 自动检测 docker 服务
      - --providers.docker.exposedbydefault=false # 默认情况下容器不会被暴露，除非配置了规则
      - --entryPoints.web.address=:80 # 监听 HTTP 端口
      - --entryPoints.websecure.address=:443 # 监听 HTTPS 端口
      - --entryPoints.web.http.redirections.entryPoint.to=websecure
      - --entryPoints.web.http.redirections.entryPoint.scheme=https
      - --certificatesresolvers.le.acme.dnschallenge=true
      - --certificatesresolvers.le.acme.dnschallenge.provider=alidns # 域名的 DNS 运营商
      - --certificatesresolvers.le.acme.email=80118151@qq.com
      - --certificatesresolvers.le.acme.storage=/acme/acme.json
      - --accesslog=true  # dev
      # - --accesslog.format=json
    env_file:
      - .env # 传递 DNS API
    ports:
      - 443:443 # 监听 HTTPS 端口
      - 80:80 # 监听 HTTP 端口
      - 8080:8080 # 监听 Traefik 仪表盘端口
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # 让 Traefik 连接到 docker 服务
      - ./acme:/acme # 证书存储目录
    networks:
      - default
    restart: always

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:

networks:
  default:
    ipam:
      # 避免和校园网网段(172.12.0.0/16)冲突
      driver: default
      config:
        - subnet: 192.168.114.0/24
          gateway: 192.168.114.1
